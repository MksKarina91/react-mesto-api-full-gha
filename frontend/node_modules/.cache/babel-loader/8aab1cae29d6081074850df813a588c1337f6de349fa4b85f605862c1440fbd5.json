{"ast":null,"code":"export class Api {\n  constructor({\n    url,\n    headers\n  }) {\n    this._url = url;\n    this._headers = headers;\n  }\n  _checkError(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n  _getTokenHeaders() {\n    const token = localStorage.getItem('jwt');\n    return {\n      ...this._headers,\n      'Authorization': `Bearer ${token}`\n    };\n  }\n  getUserInfo() {\n    return fetch(`${this._url}/users/me`, {\n      headers: this._getTokenHeaders(),\n      method: 'GET'\n    }).then(this._checkError);\n  }\n  setUserInfo(inputValues) {\n    return fetch(`${this._url}/users/me`, {\n      method: 'PATCH',\n      headers: this._getTokenHeaders(),\n      body: JSON.stringify({\n        name: inputValues.name,\n        about: inputValues.about\n      })\n    }).then(this._checkError);\n  }\n  getInitialCards() {\n    return fetch(`${this._url}/cards`, {\n      headers: this._getTokenHeaders(),\n      method: 'GET'\n    }).then(this._checkError);\n  }\n  sentNewCard(inputValues) {\n    return fetch(`${this._url}/cards`, {\n      method: 'POST',\n      headers: this._getTokenHeaders(),\n      body: JSON.stringify({\n        name: inputValues.profileName,\n        link: inputValues.profileAbout\n      })\n    }).then(this._checkError);\n  }\n  deleteCard(cardId) {\n    return fetch(`${this._url}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: this._getTokenHeaders()\n    }).then(this._checkError);\n  }\n  addLike(cardId) {\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: 'PUT',\n      headers: this._getTokenHeaders()\n    }).then(this._checkError);\n  }\n  deleteLike(cardId) {\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: 'DELETE',\n      headers: this._getTokenHeaders()\n    }).then(this._checkError);\n  }\n  updateAvatar(data) {\n    return fetch(`${this._url}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._getTokenHeaders(),\n      body: JSON.stringify({\n        avatar: data.avatarLink\n      })\n    }).then(this._checkError);\n  }\n}\nexport const api = new Api({\n  url: 'https://api.mkskarina.nomoredomainsmonster.ru',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});","map":{"version":3,"names":["Api","constructor","url","headers","_url","_headers","_checkError","res","ok","json","Promise","reject","status","_getTokenHeaders","token","localStorage","getItem","getUserInfo","fetch","method","then","setUserInfo","inputValues","body","JSON","stringify","name","about","getInitialCards","sentNewCard","profileName","link","profileAbout","deleteCard","cardId","addLike","deleteLike","updateAvatar","data","avatar","avatarLink","api"],"sources":["/Users/MksKarina91/Documents/GitHub/react-mesto-api-full-gha/frontend/src/utils/Api.js"],"sourcesContent":["export class Api {\n    constructor({ url, headers }) {\n        this._url = url;\n        this._headers = headers;\n    }\n\n    _checkError(res) {\n        if (res.ok) {\n            return res.json();\n        }\n        return Promise.reject(`Ошибка: ${res.status}`);\n    }\n\n    _getTokenHeaders() {\n        const token = localStorage.getItem('jwt');\n        return { ...this._headers, 'Authorization': `Bearer ${token}` };\n    }\n\n    getUserInfo() {\n        return fetch(`${this._url}/users/me`, {\n            headers: this._getTokenHeaders(),\n            method: 'GET'\n        })\n            .then(this._checkError);\n    }\n\n    setUserInfo(inputValues) {\n        return fetch(`${this._url}/users/me`, {\n            method: 'PATCH',\n            headers: this._getTokenHeaders(),\n            body: JSON.stringify({\n                name: inputValues.name,\n                about: inputValues.about\n            })\n        })\n            .then(this._checkError);\n    }\n\n    getInitialCards() {\n        return fetch(`${this._url}/cards`, {\n            headers: this._getTokenHeaders(),\n            method: 'GET'\n        })\n            .then(this._checkError);\n    }\n\n    sentNewCard(inputValues) {\n        return fetch(`${this._url}/cards`, {\n            method: 'POST',\n            headers: this._getTokenHeaders(),\n            body: JSON.stringify({\n                name: inputValues.profileName,\n                link: inputValues.profileAbout\n            })\n        })\n            .then(this._checkError);\n    }\n\n    deleteCard(cardId) {\n        return fetch(`${this._url}/cards/${cardId}`, {\n            method: 'DELETE',\n            headers: this._getTokenHeaders(),\n        })\n            .then(this._checkError);\n    }\n\n    addLike(cardId) {\n        return fetch(`${this._url}/cards/${cardId}/likes`, {\n            method: 'PUT',\n            headers: this._getTokenHeaders(),\n        })\n            .then(this._checkError);\n    }\n\n    deleteLike(cardId) {\n        return fetch(`${this._url}/cards/${cardId}/likes`, {\n            method: 'DELETE',\n            headers: this._getTokenHeaders(),\n        })\n            .then(this._checkError);\n    }\n\n    updateAvatar(data) {\n        return fetch(`${this._url}/users/me/avatar`, {\n            method: 'PATCH',\n            headers: this._getTokenHeaders(),\n            body: JSON.stringify({ avatar: data.avatarLink })\n        })\n            .then(this._checkError);\n    }\n}\n\nexport const api = new Api({\n    url: 'https://api.mkskarina.nomoredomainsmonster.ru',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}